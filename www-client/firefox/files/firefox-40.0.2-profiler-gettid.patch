diff -Naurw mozilla-release.orig/tools/profiler/GeckoTaskTracer.cpp mozilla-release/tools/profiler/GeckoTaskTracer.cpp
--- mozilla-release.orig/tools/profiler/GeckoTaskTracer.cpp	2015-08-12 16:40:24.000000000 +0700
+++ mozilla-release/tools/profiler/GeckoTaskTracer.cpp	2015-08-15 14:42:12.626785042 +0700
@@ -19,8 +19,8 @@
 
 #include <stdarg.h>
 
-#if defined(__GLIBC__)
-// glibc doesn't implement gettid(2).
+#if defined(OS_LINUX) && !defined(ANDROID)
+// only bionic wraps gettid(2).
 #include <sys/syscall.h>
 static pid_t gettid()
 {
diff -Naurw mozilla-release.orig/tools/profiler/platform-linux-lul.h mozilla-release/tools/profiler/platform-linux-lul.h
--- mozilla-release.orig/tools/profiler/platform-linux-lul.h	2015-08-12 16:40:24.000000000 +0700
+++ mozilla-release/tools/profiler/platform-linux-lul.h	2015-08-15 14:44:08.050121815 +0700
@@ -16,9 +16,9 @@
 void
 logging_sink_for_LUL(const char* str);
 
-// We need a definition of gettid(), but glibc doesn't provide a
+// We need a definition of gettid(), but only android provides a
 // wrapper for it.
-#if defined(__GLIBC__)
+#if !defined(ANDROID)
 #include <unistd.h>
 #include <sys/syscall.h>
 static inline pid_t gettid()
diff -Naurw mozilla-release.orig/tools/profiler/platform-linux.cc mozilla-release/tools/profiler/platform-linux.cc
--- mozilla-release.orig/tools/profiler/platform-linux.cc	2015-08-12 16:40:24.000000000 +0700
+++ mozilla-release/tools/profiler/platform-linux.cc	2015-08-15 14:42:12.626785042 +0700
@@ -701,10 +701,10 @@
 {
   MOZ_ASSERT(aContext);
   ucontext_t* pContext = reinterpret_cast<ucontext_t*>(aContext);
-  if (!getcontext(pContext)) {
-    context = pContext;
-    SetSampleContext(this, aContext);
-  }
+//  if (!getcontext(pContext)) {
+//    context = pContext;
+//    SetSampleContext(this, aContext);
+//  }
 }
 
 void OS::SleepMicro(int microseconds)
